image:
  name: $DOCKER_REG_HOST/devops/services/build/build:$BUILD_ENV_VERSION

variables:
  GIT_SSL_NO_VERIFY: "true"
  DOCKER_DRIVER: overlay2

  ENV: dev
  PROJECT_KEY: cdi

  PROVIDER: aws
  ACCOUNT: dev
  REGION: us-east-1

  SERVICE_NAME: $CI_PROJECT_NAME
  SERVICE_VERSION: 0.2.13
  BUILD_ENV_VERSION: 0.3.0

  CM_BRANCH: dev
  DESTROY_ALL: "false"
  REBUILD: "false"

cache:
  paths:
    - .terraform

before_script:
  - bash ./srv/ci/get-credentials.sh
  - bash ./srv/ci/export-variables.sh

stages:
  - prepare
  - destroy
  - build
  - plan
  - deploy

tf:init:
  stage: prepare
  script:
    - bash ./srv/terraform/terraform-init.sh
    - bash ./srv/terraform/terraform-validate.sh
  artifacts:
    expire_in: 1 week
    paths:
      - $CI_PROJECT_DIR/terraform.tfvars

packer:validate:
  stage: prepare
  script:
    - bash ./srv/packer/packer-validate.sh
    - bash ./srv/ci/describe-images.sh
  artifacts:
    expire_in: 1 week
    paths:
      - images.json

tf:destroy:
  stage: destroy
  script:
    - bash ./srv/terraform/terraform-destroy.sh

packer:build:
  stage: build
  script:
    - bash ./srv/packer/packer-build.sh
  only:
    refs:
      - dev
      - master
      - stable
      - schedules

tf:plan:
  stage: plan
  script:
    - bash ./srv/terraform/terraform-init.sh
    - bash ./srv/terraform/terraform-plan.sh
  artifacts:
    expire_in: 1 week
    paths:
      - plan.tfplan

tf:apply:
  stage: deploy
  environment:
    name: $ENV
  script:
    - bash ./srv/terraform/terraform-apply.sh
  only:
    refs:
      - dev
      - master
      - schedules